import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

interface Campaign {
  id: string;
  code: string;
  name: string;
  description: string;
  vehicleType: string;
  startDate: string;
  endDate: string;
  vehicleCount: number;
  completionPercentage: number;
  status: 'M·ªõi nh·∫≠n' | 'ƒêang tri·ªÉn khai' | 'Ho√†n th√†nh';
  documents: Document[];
}

interface Document {
  id: string;
  name: string;
  type: string;
  url: string;
  uploadDate: string;
}

interface Customer {
  id: string;
  vin: string;
  customerName: string;
  phone: string;
  email: string;
  participationStatus: 'Ch∆∞a li√™n h·ªá' | 'ƒê√£ li√™n h·ªá' | 'ƒê√£ h·∫πn l·ªãch' | 'ƒê√£ x·ª≠ l√Ω' | 'T·ª´ ch·ªëi';
  appointmentDate?: string;
  notes?: string;
  refusalReason?: string;
}

const CampaignDetail: React.FC<{ campaignId?: string }> = ({ campaignId = '1' }) => {
  const [campaign, setCampaign] = useState<Campaign | null>(null);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [isContactDialogOpen, setIsContactDialogOpen] = useState(false);
  const [isAppointmentDialogOpen, setIsAppointmentDialogOpen] = useState(false);
  const [isStatusUpdateDialogOpen, setIsStatusUpdateDialogOpen] = useState(false);

  // Mock data
  useEffect(() => {
    const mockCampaign: Campaign = {
      id: campaignId,
      code: 'CAM-2025-001',
      name: 'Chi·∫øn d·ªãch ki·ªÉm tra pin EV Model X',
      description: 'Chi·∫øn d·ªãch ki·ªÉm tra v√† thay th·∫ø pin EV cho c√°c xe Model X ƒë∆∞·ª£c s·∫£n xu·∫•t t·ª´ th√°ng 01/2023 ƒë·∫øn 06/2023 do ph√°t hi·ªán v·∫•n ƒë·ªÅ v·ªÅ tu·ªïi th·ªç pin kh√¥ng ƒë·∫°t ti√™u chu·∫©n.',
      vehicleType: 'Model X',
      startDate: '2025-01-15',
      endDate: '2025-03-15',
      vehicleCount: 150,
      completionPercentage: 65,
      status: 'ƒêang tri·ªÉn khai',
      documents: [
        {
          id: '1',
          name: 'H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t ki·ªÉm tra pin',
          type: 'PDF',
          url: '/documents/battery-check-guide.pdf',
          uploadDate: '2025-01-10'
        },
        {
          id: '2',
          name: 'Quy tr√¨nh thay th·∫ø pin',
          type: 'PDF',
          url: '/documents/battery-replacement.pdf',
          uploadDate: '2025-01-10'
        }
      ]
    };

    const mockCustomers: Customer[] = [
      {
        id: '1',
        vin: '1HGBH41JXMN109186',
        customerName: 'Nguy·ªÖn VƒÉn An',
        phone: '0123456789',
        email: 'nguyenvanan@email.com',
        participationStatus: 'ƒê√£ h·∫πn l·ªãch',
        appointmentDate: '2025-02-15T10:00',
        notes: 'Kh√°ch h√†ng ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn'
      },
      {
        id: '2',
        vin: '2HGBH41JXMN109187',
        customerName: 'Tr·∫ßn Th·ªã B√¨nh',
        phone: '0987654321',
        email: 'tranthibinh@email.com',
        participationStatus: 'ƒê√£ li√™n h·ªá',
        notes: 'ƒêang ch·ªù kh√°ch h√†ng x√°c nh·∫≠n th·ªùi gian'
      },
      {
        id: '3',
        vin: '3HGBH41JXMN109188',
        customerName: 'L√™ VƒÉn C∆∞·ªùng',
        phone: '0369852147',
        email: 'levanprovince@email.com',
        participationStatus: 'T·ª´ ch·ªëi',
        refusalReason: 'ƒê√£ b√°n xe'
      },
      {
        id: '4',
        vin: '4HGBH41JXMN109189',
        customerName: 'Ph·∫°m Th·ªã Dung',
        phone: '0147258369',
        email: 'phamthidung@email.com',
        participationStatus: 'ƒê√£ x·ª≠ l√Ω'
      }
    ];

    setCampaign(mockCampaign);
    setCustomers(mockCustomers);
  }, [campaignId]);

  const getStatusBadgeVariant = (status: Customer['participationStatus']) => {
    switch (status) {
      case 'Ch∆∞a li√™n h·ªá':
        return 'secondary';
      case 'ƒê√£ li√™n h·ªá':
        return 'default';
      case 'ƒê√£ h·∫πn l·ªãch':
        return 'default';
      case 'ƒê√£ x·ª≠ l√Ω':
        return 'default';
      case 'T·ª´ ch·ªëi':
        return 'destructive';
      default:
        return 'secondary';
    }
  };

  const handleContactCustomer = (customer: Customer) => {
    setSelectedCustomer(customer);
    setIsContactDialogOpen(true);
  };

  const handleScheduleAppointment = (customer: Customer) => {
    setSelectedCustomer(customer);
    setIsAppointmentDialogOpen(true);
  };

  const handleUpdateStatus = (customer: Customer) => {
    setSelectedCustomer(customer);
    setIsStatusUpdateDialogOpen(true);
  };

  if (!campaign) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" className="flex items-center gap-2">
          ‚¨ÖÔ∏è Quay l·∫°i
        </Button>
        <div className="flex-1">
          <h1 className="text-3xl font-bold text-gray-900">{campaign.name}</h1>
          <p className="text-gray-600 mt-1">M√£ chi·∫øn d·ªãch: {campaign.code}</p>
        </div>
        <Badge variant={campaign.status === 'Ho√†n th√†nh' ? 'default' : 'default'}>
          {campaign.status}
        </Badge>
      </div>

      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList>
          <TabsTrigger value="overview">T·ªïng quan</TabsTrigger>
          <TabsTrigger value="customers">Danh s√°ch kh√°ch h√†ng</TabsTrigger>
          <TabsTrigger value="documents">T√†i li·ªáu</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Campaign Overview */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">T·ªïng s·ªë xe</CardTitle>
                <span className="text-2xl">üöó</span>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{campaign.vehicleCount}</div>
                <p className="text-xs text-muted-foreground">
                  xe c·∫ßn x·ª≠ l√Ω
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Ti·∫øn ƒë·ªô</CardTitle>
                <span className="text-2xl">‚úÖ</span>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{campaign.completionPercentage}%</div>
                <p className="text-xs text-muted-foreground">
                  ho√†n th√†nh
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Th·ªùi h·∫°n</CardTitle>
                <span className="text-2xl">‚è∞</span>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {Math.ceil((new Date(campaign.endDate).getTime() - new Date().getTime()) / (1000 * 3600 * 24))}
                </div>
                <p className="text-xs text-muted-foreground">
                  ng√†y c√≤n l·∫°i
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Campaign Details */}
          <Card>
            <CardHeader>
              <CardTitle>Th√¥ng tin chi ti·∫øt</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-700">Lo·∫°i xe √°p d·ª•ng</label>
                  <p className="mt-1">{campaign.vehicleType}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700">Th·ªùi gian th·ª±c hi·ªán</label>
                  <p className="mt-1">{campaign.startDate} - {campaign.endDate}</p>
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">M√¥ t·∫£ chi·∫øn d·ªãch</label>
                <p className="mt-1 text-gray-600">{campaign.description}</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="customers" className="space-y-6">
          {/* Customer Statistics */}
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {[
              { label: 'Ch∆∞a li√™n h·ªá', count: customers.filter(c => c.participationStatus === 'Ch∆∞a li√™n h·ªá').length, color: 'bg-gray-500' },
              { label: 'ƒê√£ li√™n h·ªá', count: customers.filter(c => c.participationStatus === 'ƒê√£ li√™n h·ªá').length, color: 'bg-blue-500' },
              { label: 'ƒê√£ h·∫πn l·ªãch', count: customers.filter(c => c.participationStatus === 'ƒê√£ h·∫πn l·ªãch').length, color: 'bg-yellow-500' },
              { label: 'ƒê√£ x·ª≠ l√Ω', count: customers.filter(c => c.participationStatus === 'ƒê√£ x·ª≠ l√Ω').length, color: 'bg-green-500' },
              { label: 'T·ª´ ch·ªëi', count: customers.filter(c => c.participationStatus === 'T·ª´ ch·ªëi').length, color: 'bg-red-500' }
            ].map((stat, index) => (
              <Card key={index}>
                <CardContent className="pt-6">
                  <div className="flex items-center space-x-2">
                    <div className={`w-3 h-3 rounded-full ${stat.color}`}></div>
                    <div>
                      <div className="text-2xl font-bold">{stat.count}</div>
                      <div className="text-xs text-muted-foreground">{stat.label}</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Customers Table */}
          <Card>
            <CardHeader>
              <CardTitle>Danh s√°ch kh√°ch h√†ng/xe ({customers.length})</CardTitle>
              <CardDescription>
                Qu·∫£n l√Ω th√¥ng tin v√† tr·∫°ng th√°i x·ª≠ l√Ω c·ªßa t·ª´ng kh√°ch h√†ng
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>VIN</TableHead>
                      <TableHead>T√™n kh√°ch h√†ng</TableHead>
                      <TableHead>Li√™n h·ªá</TableHead>
                      <TableHead>Tr·∫°ng th√°i</TableHead>
                      <TableHead>L·ªãch h·∫πn</TableHead>
                      <TableHead>Ghi ch√∫</TableHead>
                      <TableHead>Thao t√°c</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {customers.map((customer) => (
                      <TableRow key={customer.id}>
                        <TableCell className="font-mono text-sm">{customer.vin}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            üë§ {customer.customerName}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm">
                            <p>{customer.phone}</p>
                            <p className="text-gray-500">{customer.email}</p>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant={getStatusBadgeVariant(customer.participationStatus)}>
                            {customer.participationStatus}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          {customer.appointmentDate ? (
                            <div className="text-sm">
                              <p>{new Date(customer.appointmentDate).toLocaleDateString('vi-VN')}</p>
                              <p className="text-gray-500">{new Date(customer.appointmentDate).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}</p>
                            </div>
                          ) : (
                            <span className="text-gray-400">-</span>
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="max-w-xs">
                            {customer.notes && <p className="text-sm text-gray-600">{customer.notes}</p>}
                            {customer.refusalReason && (
                              <p className="text-sm text-red-600 flex items-center gap-1">
                                ‚ö†Ô∏è {customer.refusalReason}
                              </p>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleContactCustomer(customer)}
                            >
                              üìû
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleScheduleAppointment(customer)}
                            >
                              üìÖ
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleUpdateStatus(customer)}
                            >
                              ‚úÖ
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4">
            <Button className="flex items-center gap-2">
              üì§ G·ª≠i b√°o c√°o k·∫øt qu·∫£ cho h√£ng
            </Button>
          </div>
        </TabsContent>

        <TabsContent value="documents" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üìÑ T√†i li·ªáu h∆∞·ªõng d·∫´n t·ª´ h√£ng
              </CardTitle>
              <CardDescription>
                C√°c t√†i li·ªáu k·ªπ thu·∫≠t v√† h∆∞·ªõng d·∫´n th·ª±c hi·ªán chi·∫øn d·ªãch
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {campaign.documents.map((doc) => (
                  <div key={doc.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">üìÑ</span>
                      <div>
                        <p className="font-medium">{doc.name}</p>
                        <p className="text-sm text-gray-500">
                          T·∫£i l√™n: {new Date(doc.uploadDate).toLocaleDateString('vi-VN')} ‚Ä¢ {doc.type}
                        </p>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      ‚¨áÔ∏è T·∫£i xu·ªëng
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Contact Dialog */}
      <Dialog open={isContactDialogOpen} onOpenChange={setIsContactDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>G·ªçi/Li√™n h·ªá kh√°ch h√†ng</DialogTitle>
            <DialogDescription>
              Li√™n h·ªá v·ªõi kh√°ch h√†ng {selectedCustomer?.customerName}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">S·ªë ƒëi·ªán tho·∫°i</label>
              <Input value={selectedCustomer?.phone} readOnly />
            </div>
            <div>
              <label className="text-sm font-medium">Ghi ch√∫ cu·ªôc g·ªçi</label>
              <Textarea placeholder="Ghi ch√∫ v·ªÅ cu·ªôc g·ªçi..." />
            </div>
            <div className="flex gap-2">
              <Button>L∆∞u ghi ch√∫</Button>
              <Button variant="outline" onClick={() => setIsContactDialogOpen(false)}>
                ƒê√≥ng
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Appointment Dialog */}
      <Dialog open={isAppointmentDialogOpen} onOpenChange={setIsAppointmentDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>ƒê·∫∑t l·ªãch h·∫πn</DialogTitle>
            <DialogDescription>
              ƒê·∫∑t l·ªãch h·∫πn cho kh√°ch h√†ng {selectedCustomer?.customerName}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">Ng√†y h·∫πn</label>
              <Input type="date" />
            </div>
            <div>
              <label className="text-sm font-medium">Gi·ªù h·∫πn</label>
              <Input type="time" />
            </div>
            <div>
              <label className="text-sm font-medium">Ghi ch√∫</label>
              <Textarea placeholder="Ghi ch√∫ v·ªÅ l·ªãch h·∫πn..." />
            </div>
            <div className="flex gap-2">
              <Button>X√°c nh·∫≠n l·ªãch h·∫πn</Button>
              <Button variant="outline" onClick={() => setIsAppointmentDialogOpen(false)}>
                H·ªßy
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Status Update Dialog */}
      <Dialog open={isStatusUpdateDialogOpen} onOpenChange={setIsStatusUpdateDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>C·∫≠p nh·∫≠t tr·∫°ng th√°i</DialogTitle>
            <DialogDescription>
              C·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω cho kh√°ch h√†ng {selectedCustomer?.customerName}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">Tr·∫°ng th√°i m·ªõi</label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="contacted">ƒê√£ li√™n h·ªá</SelectItem>
                  <SelectItem value="scheduled">ƒê√£ h·∫πn l·ªãch</SelectItem>
                  <SelectItem value="processed">ƒê√£ x·ª≠ l√Ω</SelectItem>
                  <SelectItem value="rejected">T·ª´ ch·ªëi</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium">Ghi ch√∫</label>
              <Textarea placeholder="Ghi ch√∫ v·ªÅ vi·ªác c·∫≠p nh·∫≠t tr·∫°ng th√°i..." />
            </div>
            <div className="flex gap-2">
              <Button>C·∫≠p nh·∫≠t tr·∫°ng th√°i</Button>
              <Button variant="outline" onClick={() => setIsStatusUpdateDialogOpen(false)}>
                H·ªßy
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CampaignDetail;