import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

interface WarrantyClaim {
  id: string;
  requestCode: string;
  vin: string;
  model: string;
  serviceCenter: string;
  submissionDate: string;
  status: 'Ch·ªù duy·ªát' | 'ƒê·ªìng √Ω' | 'T·ª´ ch·ªëi';
  estimatedCost: number;
  priority: 'Th·∫•p' | 'Trung b√¨nh' | 'Cao' | 'Kh·∫©n c·∫•p';
  issueType: string;
}

const WarrantyClaims: React.FC = () => {
  const [claims, setClaims] = useState<WarrantyClaim[]>([]);
  const [filteredClaims, setFilteredClaims] = useState<WarrantyClaim[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [modelFilter, setModelFilter] = useState<string>('all');
  const [serviceCenterFilter, setServiceCenterFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [dateFilter, setDateFilter] = useState<string>('all');

  // Mock data
  useEffect(() => {
    const mockClaims: WarrantyClaim[] = [
      {
        id: '1',
        requestCode: 'WR-2025-001',
        vin: '1HGBH41JXMN109186',
        model: 'Model X',
        serviceCenter: 'SC H√† N·ªôi',
        submissionDate: '2025-09-25',
        status: 'Ch·ªù duy·ªát',
        estimatedCost: 15000000,
        priority: 'Cao',
        issueType: 'Pin EV'
      },
      {
        id: '2',
        requestCode: 'WR-2025-002',
        vin: '2HGBH41JXMN109187',
        model: 'Model Y',
        serviceCenter: 'SC TP.HCM',
        submissionDate: '2025-09-24',
        status: 'ƒê·ªìng √Ω',
        estimatedCost: 8500000,
        priority: 'Trung b√¨nh',
        issueType: 'H·ªá th·ªëng ƒëi·ªán'
      },
      {
        id: '3',
        requestCode: 'WR-2025-003',
        vin: '3HGBH41JXMN109188',
        model: 'Model S',
        serviceCenter: 'SC ƒê√† N·∫µng',
        submissionDate: '2025-09-23',
        status: 'T·ª´ ch·ªëi',
        estimatedCost: 12000000,
        priority: 'Th·∫•p',
        issueType: 'C·∫£m bi·∫øn'
      },
      {
        id: '4',
        requestCode: 'WR-2025-004',
        vin: '4HGBH41JXMN109189',
        model: 'Model 3',
        serviceCenter: 'SC H√† N·ªôi',
        submissionDate: '2025-09-26',
        status: 'Ch·ªù duy·ªát',
        estimatedCost: 6000000,
        priority: 'Kh·∫©n c·∫•p',
        issueType: 'Phanh'
      },
      {
        id: '5',
        requestCode: 'WR-2025-005',
        vin: '5HGBH41JXMN109190',
        model: 'Model Y',
        serviceCenter: 'SC TP.HCM',
        submissionDate: '2025-09-27',
        status: 'Ch·ªù duy·ªát',
        estimatedCost: 9200000,
        priority: 'Cao',
        issueType: 'ƒê·ªông c∆°'
      }
    ];
    setClaims(mockClaims);
    setFilteredClaims(mockClaims);
  }, []);

  // Filter claims based on search and filters
  useEffect(() => {
    const filtered = claims.filter(claim => {
      const matchesSearch = 
        claim.requestCode.toLowerCase().includes(searchTerm.toLowerCase()) ||
        claim.vin.toLowerCase().includes(searchTerm.toLowerCase()) ||
        claim.serviceCenter.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesModel = modelFilter === 'all' || claim.model === modelFilter;
      const matchesServiceCenter = serviceCenterFilter === 'all' || claim.serviceCenter === serviceCenterFilter;
      const matchesStatus = statusFilter === 'all' || claim.status === statusFilter;
      
      // Date filter logic could be implemented here
      const matchesDate = dateFilter === 'all' || true; // Simplified for demo
      
      return matchesSearch && matchesModel && matchesServiceCenter && matchesStatus && matchesDate;
    });

    setFilteredClaims(filtered);
  }, [claims, searchTerm, modelFilter, serviceCenterFilter, statusFilter, dateFilter]);

  const getStatusBadgeVariant = (status: WarrantyClaim['status']) => {
    switch (status) {
      case 'Ch·ªù duy·ªát':
        return 'secondary';
      case 'ƒê·ªìng √Ω':
        return 'default';
      case 'T·ª´ ch·ªëi':
        return 'destructive';
      default:
        return 'secondary';
    }
  };

  const getPriorityBadgeVariant = (priority: WarrantyClaim['priority']) => {
    switch (priority) {
      case 'Th·∫•p':
        return 'outline';
      case 'Trung b√¨nh':
        return 'secondary';
      case 'Cao':
        return 'default';
      case 'Kh·∫©n c·∫•p':
        return 'destructive';
      default:
        return 'outline';
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const handleViewDetail = (claimId: string) => {
    console.log('View claim details:', claimId);
    // Navigate to claim detail page
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">X√©t duy·ªát B·∫£o h√†nh</h1>
          <p className="text-gray-600 mt-1">Qu·∫£n l√Ω v√† x√©t duy·ªát c√°c y√™u c·∫ßu b·∫£o h√†nh t·ª´ trung t√¢m d·ªãch v·ª•</p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="secondary" className="text-sm">
            üìã {claims.filter(c => c.status === 'Ch·ªù duy·ªát').length} ch·ªù duy·ªát
          </Badge>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">T·ªïng y√™u c·∫ßu</CardTitle>
            <span className="text-2xl">üìÑ</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{claims.length}</div>
            <p className="text-xs text-muted-foreground">
              y√™u c·∫ßu b·∫£o h√†nh
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ch·ªù duy·ªát</CardTitle>
            <span className="text-2xl">‚è≥</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">
              {claims.filter(c => c.status === 'Ch·ªù duy·ªát').length}
            </div>
            <p className="text-xs text-muted-foreground">
              c·∫ßn x√©t duy·ªát
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">ƒê√£ duy·ªát</CardTitle>
            <span className="text-2xl">‚úÖ</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {claims.filter(c => c.status === 'ƒê·ªìng √Ω').length}
            </div>
            <p className="text-xs text-muted-foreground">
              ƒë√£ ch·∫•p nh·∫≠n
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">T·ª´ ch·ªëi</CardTitle>
            <span className="text-2xl">‚ùå</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {claims.filter(c => c.status === 'T·ª´ ch·ªëi').length}
            </div>
            <p className="text-xs text-muted-foreground">
              ƒë√£ t·ª´ ch·ªëi
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üîç B·ªô l·ªçc
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {/* Search */}
            <div>
              <Input
                placeholder="T√¨m ki·∫øm theo m√£, VIN, trung t√¢m..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Model Filter */}
            <Select value={modelFilter} onValueChange={setModelFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Model xe" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ model</SelectItem>
                <SelectItem value="Model S">Model S</SelectItem>
                <SelectItem value="Model X">Model X</SelectItem>
                <SelectItem value="Model Y">Model Y</SelectItem>
                <SelectItem value="Model 3">Model 3</SelectItem>
              </SelectContent>
            </Select>

            {/* Service Center Filter */}
            <Select value={serviceCenterFilter} onValueChange={setServiceCenterFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Trung t√¢m" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ trung t√¢m</SelectItem>
                <SelectItem value="SC H√† N·ªôi">SC H√† N·ªôi</SelectItem>
                <SelectItem value="SC TP.HCM">SC TP.HCM</SelectItem>
                <SelectItem value="SC ƒê√† N·∫µng">SC ƒê√† N·∫µng</SelectItem>
              </SelectContent>
            </Select>

            {/* Status Filter */}
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Tr·∫°ng th√°i" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ tr·∫°ng th√°i</SelectItem>
                <SelectItem value="Ch·ªù duy·ªát">Ch·ªù duy·ªát</SelectItem>
                <SelectItem value="ƒê·ªìng √Ω">ƒê·ªìng √Ω</SelectItem>
                <SelectItem value="T·ª´ ch·ªëi">T·ª´ ch·ªëi</SelectItem>
              </SelectContent>
            </Select>

            {/* Date Filter */}
            <Select value={dateFilter} onValueChange={setDateFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Th·ªùi gian" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ th·ªùi gian</SelectItem>
                <SelectItem value="today">H√¥m nay</SelectItem>
                <SelectItem value="this-week">Tu·∫ßn n√†y</SelectItem>
                <SelectItem value="this-month">Th√°ng n√†y</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Claims Table */}
      <Card>
        <CardHeader>
          <CardTitle>Danh s√°ch y√™u c·∫ßu b·∫£o h√†nh ({filteredClaims.length})</CardTitle>
          <CardDescription>
            Qu·∫£n l√Ω v√† x√©t duy·ªát c√°c y√™u c·∫ßu b·∫£o h√†nh t·ª´ trung t√¢m d·ªãch v·ª•
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>M√£ y√™u c·∫ßu</TableHead>
                  <TableHead>VIN</TableHead>
                  <TableHead>Model</TableHead>
                  <TableHead>Trung t√¢m g·ª≠i</TableHead>
                  <TableHead>Ng√†y g·ª≠i</TableHead>
                  <TableHead>V·∫•n ƒë·ªÅ</TableHead>
                  <TableHead>ƒê·ªô ∆∞u ti√™n</TableHead>
                  <TableHead>Tr·∫°ng th√°i</TableHead>
                  <TableHead>∆Ø·ªõc t√≠nh chi ph√≠</TableHead>
                  <TableHead>Thao t√°c</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredClaims.map((claim) => (
                  <TableRow key={claim.id}>
                    <TableCell className="font-medium">{claim.requestCode}</TableCell>
                    <TableCell className="font-mono text-sm">{claim.vin}</TableCell>
                    <TableCell>
                      <Badge variant="outline">{claim.model}</Badge>
                    </TableCell>
                    <TableCell>{claim.serviceCenter}</TableCell>
                    <TableCell>
                      {new Date(claim.submissionDate).toLocaleDateString('vi-VN')}
                    </TableCell>
                    <TableCell>
                      <span className="text-sm">{claim.issueType}</span>
                    </TableCell>
                    <TableCell>
                      <Badge variant={getPriorityBadgeVariant(claim.priority)}>
                        {claim.priority === 'Kh·∫©n c·∫•p' && 'üö® '}
                        {claim.priority === 'Cao' && 'üî• '}
                        {claim.priority === 'Trung b√¨nh' && 'üìã '}
                        {claim.priority === 'Th·∫•p' && 'üìù '}
                        {claim.priority}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant={getStatusBadgeVariant(claim.status)}>
                        {claim.status}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <span className="font-medium">
                        {formatCurrency(claim.estimatedCost)}
                      </span>
                    </TableCell>
                    <TableCell>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="flex items-center gap-2"
                        onClick={() => handleViewDetail(claim.id)}
                      >
                        üëÅÔ∏è Xem chi ti·∫øt
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {filteredClaims.length === 0 && (
            <div className="text-center py-8">
              <p className="text-gray-500">Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu b·∫£o h√†nh ph√π h·ª£p v·ªõi b·ªô l·ªçc</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default WarrantyClaims;